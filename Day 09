1.高阶函数
#A function can be passed as a parameter in another funtion 

Example:

def sum_num(num1,num2):
    result = num1 + num2
    return result

def func(num1, num2, new_func):
    value = new_func(num1, num2)
    print(value)


2.匿名函数 Lambda
#Can be used to simplify your codes.
#No need t add 'Return' in your function body.

#Regular:
def func(a,b,c):
    return a+b+c
print(func(1,2,3))

#Lambda:
f = lambda a,b,c : a+b+c
print(f(1,2,3))

#Regular:
def is_even(num):
    if num%2 ==0:
        return True
    else:
        return False
        
#Lambda:
f = lambda num : True if num%2 ==0 else False


#list.sort() will change the original list
#sorted(list) will not change the original list

my_list = [{'name':'zs', 'age':20},{'name':'ls', 'age':18}]

my_list.sort(key = lambda item:item['age'])

print(my_list)


3. 列表生成式
my_list = [value for value in range(1,8)]

#[[x,y],[x1,y1]]
my_list = [[x,y] for x in range(1,5) for y in range(1,5)]


4.深拷贝和浅拷贝
# 浅拷贝： 指向同一个地址
# 深拷贝： 都有自己独立的内存地址

# 1.赋值，默认传递数据的引用, 其中一个改变数据，另外一个已发生改变
# alist = [1,2,3]
# blist = alist
#
# print(id(alist))
# print(id(blist))
#
# alist.append(4)
# print(alist)
# print(blist)

import copy

# alist = [1,2,3,['a','b']]

# 2 copy浅拷贝,只拷贝一层
# clist = copy.copy(alist)

# print(id(alist))
# print(id(clist))
#
# alist.append(4)
# print(alist)
# print(clist)

# alist[3].append('c')
# print(alist)
# print(clist)

# 总结：只拷贝一层，其余层不变， 如果只有一层，就相当于深拷贝

#3. 深拷贝
# alist = [1,2,3,['a','b']]
# dlist = copy.deepcopy(alist)
#
# alist[3].append('c')
# print(id(alist))
# print(id(dlist))
#
# print(alist)
# print(dlist)

# 总结： 深拷贝就克隆了一份，每一份都有自己独立的内存，两者互补相干

